#+property: header-args:py :tangle yes

* Rich Traceback

#+begin_src py
import rich.traceback as RichTraceback
RichTraceback.install(show_locals = True)
#+end_src

* Bakery Frontend

Adapted from the entirety of [[https://stackoverflow.com/questions/56786604/import-modules-that-dont-exist-yet][this question]]:

** Imports

#+begin_src py
import hy
import sys
#+end_src

*** From

#+begin_src py
from oreo import ModuleCaller
#+end_src

*** Relative

Adapted from [[https://stackoverflow.com/users/799163/remcogerlich][RemcoGerlich's]] answer [[https://stackoverflow.com/a/21139466][here]]:

#+begin_src py
from bakery.bakery import milcery, frosting
#+end_src

** ModuleCaller
*** Class

#+begin_src py
class bakery(ModuleCaller):
    def __call__(self, *args, **kwargs):
        if args or kwargs:
            return milcery(*args, **kwargs)
        else:
            return milcery
    def __getattr__(self, program_):
        if program_.startswith("_"):
            raise AttributeError(program_)
        elif program_ in [ "frosting" ]:
            return eval(program_)
        else:
            return milcery(program_ = program_)
    bakery = __call__
    __all__ = [ var for var in vars() if var not in ('__qualname__',) ]
#+end_src

*** Apply

#+begin_src py
sys.modules[__name__] = bakery()
#+end_src
