#+name: 3572653c-1819-4b51-a09a-cbda5bfd863d
#+begin_src hy
(import oreo)
(import oreo [nots?])
(import pathlib [Path])
(require hyrule [->])
(setv cookies (/ (.resolve (. (Path __file__) parent parent) :strict True) "cookies"))
(setv cookies-ls (.ls oreo cookies))
(setv assorted-cookies (.ls oreo cookies :sort True))
#+end_src

#+name: 75a09b5c-aadf-4346-aba6-145d5cc6dd4b
#+begin_src hy
(import bakery [ls])
<<3572653c-1819-4b51-a09a-cbda5bfd863d>>
#+end_src

* tests
:PROPERTIES:
:header-args:hy+: :tangle (meq/tangle-path) :prologue (meq/get-block "75a09b5c-aadf-4346-aba6-145d5cc6dd4b")
:header-args:python+: :tangle (meq/tangle-path)
:END:

** test-list-output.hy

#+begin_src hy
(defn test-list-output-short [] (-> cookies (ls :m/list True) (isinstance list) (assert)))
(defn test-list-output-long [] (-> cookies (ls :m/type list) (isinstance list) (assert)))
#+end_src

** test-sorted-output.hy

# TODO: Test sorting strings, by using :m/frosting True and :m/type frosting
# TODO: Test sorting with lambdas

#+begin_src hy
(defn test-sorted-output [] (-> (ls) (sorted) (= (ls :m/list True :m/sort None)) (assert)))
#+end_src

** test-filtered-output.hy

#+begin_src hy
(defn not-zero? [i] (and (.isnumeric i) (not (in "0" i))))
(setv ones (sorted (gfor i cookies-ls :if (not-zero? i) i)))
(setv not-ones (sorted (gfor i cookies-ls :if (not (not-zero? i)) i)))
(defn test-filtered-output-function [] (-> cookies (ls :m/list True :m/sort None :m/filter not-zero?) (= ones) (assert)))
(defn test-filtered-output-collection [] (-> cookies (ls :m/list True :m/sort None :m/filter #(True not-zero?)) (= not-ones) (assert)))
#+end_src

** test-bakery.hy

#+begin_src hy
(import oreo [hidden?])
(defn test-bakery [] (-> assorted-cookies (= (ls :m/list True cookies :m/sort None :m/filter #(True hidden?))) (assert)))
(defn test-program-options [] (-> assorted-cookies (= (ls :m/list True :a True cookies :m/sort None :m/filter nots?)) (assert)))
#+end_src

** test-context-manager.hy

Check if temporary baking with a context manager works:

#+begin_src hy
(import oreo [hidden?])
(defn test-context-manager []
      (with [lsa (ls :a True cookies :m/context True :m/list True :m/sort None :m/filter nots?)]
            (-> assorted-cookies (= (lsa)) (assert)))
      (-> cookies
          (ls :m/list True :m/sort None :m/filter #(True hidden?))
          (= assorted-cookies)
          (assert)))
#+end_src

** test-loop.hy

#+begin_src hy
(import os [chdir])
(require oreo [with-cwd])
(defn test-loop [] (with-cwd cookies (for [item ls] (assert (in item cookies-ls)))))
#+end_src

** test-progress.hy

#+begin_src hy
(defn test-progress []
      (for [item (ls :a True cookies :m/progress "red")]
           (when (nots? item) (assert (in item cookies-ls)))))
#+end_src

** test-baking.hy

#+begin_src hy
(defn test-baking []
      (.bake- ls :a True :m/progress "green" cookies)
      (for [item ls]
           (when (nots? item) (assert (in item cookies-ls)))))
#+end_src

** test-module-call.hy

#+begin_src hy
(import bakery)
(defn test-module-call []
      (-> assorted-cookies (= ((bakery :program- "ls") :a True :m/list True :m/sort None :m/filter nots? cookies)) (assert)))
#+end_src

** test-freezing.hy

#+begin_src hy
(import bakery)
(import oreo [either?])
(defn test-freezing [] (-> [] (ls) (either? bakery) (assert)))
#+end_src

** test-git-remote.hy

#+begin_src hy
(import bakery [git])
(defn test-git-status [request] (-> (git :C request.config.rootdir) (.remote :m/str True) (= "origin") (assert)))
#+end_src

** test-string-output.hy

#+begin_src hy
(import bakery [echo])
(defn test-string-output [] (-> "Hello!" (echo :m/str True) (= "Hello!") (assert)))
#+end_src

** test-split.hy

#+begin_src hy
(defn test-split []
      (setv six-two ["6" "5" "4" "3" "2" "09" "08" "07" "06" "05" "04" "03" "02" "00" "0" "0"])
      (-> cookies (ls :m/list True :m/split 1 :m/sort True :m/filter (fn [item] (.isnumeric item))) (= six-two) (assert)))
#+end_src

** test-error.hy

#+begin_src hy
(defn test-false-error [] (-> (ls :j True :m/false-error True) (not) (assert)))
(defn test-replace-error []
      (assert (ls :j True :m/replace-error True))
      (-> (ls :j True :m/replace-error "replace error test") (= "replace error test") (assert)))
#+end_src

** test-exports.hy

#+begin_src hy
(import bakery [echo])
(defn test-exports [] (-> "$FOO" (echo :m/exports { "FOO" "bar" } :m/str True) (= "bar") (assert)))
#+end_src

** test-piping.hy

#+begin_src hy
(import bakery [env grep tail])
(import oreo [first-last-n])
(defn test-piping-first []
      (setv tails (| (ls [] :a True cookies :m/list True :m/sort None :m/filter nots?) tail))
      (-> assorted-cookies (first-last-n :last True :number 10 :type- list) (= (tails)) (assert)))
(defn test-piping-both []
      (setv egrep (| (env [] :m/exports { "FOO" "bar" } :m/str True) (grep [] "FOO")))
      (assert (= (egrep) "FOO=bar")))
#+end_src

** test-trim.hy

#+begin_src hy
(import bakery [cat])
(setv bulbasaur (sorted #("001: Bulbasaur" "002: Ivysaur" "003: Venusaur" ))
      last-three (sorted #("058: Growlithe" "059: Arcanine" "060: Poliwag" ))
      one-cookie (/ cookies "01"))
(defn test-trim []
      (.bake- cat :m/list True :m/sort None)
      (-> one-cookie (cat :m/n-lines 3) (= bulbasaur) (assert))
      (-> one-cookie (cat :m/n-lines #(3)) (= bulbasaur) (assert))
      (-> one-cookie (cat :m/n-lines { "number" 3 }) (= bulbasaur) (assert))
      (-> one-cookie (cat :m/n-lines #(True 3)) (= last-three) (assert))
      (-> one-cookie (cat :m/n-lines { "last" True "number" 3 }) (= last-three) (assert)))
#+end_src