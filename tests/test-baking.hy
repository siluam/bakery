(import bakery [ls])
(import oreo)
(import oreo [nots?])
(import pathlib [Path])
(import pytest [mark])
(require hyrule [->])
(setv cookies (/ (.resolve (. (Path __file__) parent parent) :strict True) "cookies"))
(setv cookies-ls (.ls oreo cookies))
(setv assorted-cookies (.ls oreo cookies :sort True))
(import bakery [ls :as la ls :as ld find])
(import hy [mangle] os [sep])
(defn [mark.baking] test-baking []
      (try (.bake- ls :a True cookies :m/filter nots? :m/list True :m/sort None)
           (assert (= (ls) assorted-cookies))
           (finally (.splat- ls)
                    (assert (not (in "a" (get ls.m/kwargs.baked ls.m/subcommand.default))))
                    (assert (not (in cookies (get ls.m/args.baked ls.m/subcommand.default)))))))
(defn [mark.baking] test-baking-program []
      (try (.bake- ld :m/sort True)
           (.bake- ls :programs True cookies :m/list True)
           (for [item la] (assert (in item assorted-cookies)))
           (-> assorted-cookies (cut None None -1) (= (ld)) assert)
           (finally (.splat- ld :all-classes True)
                    (assert (not (in (mangle "m/sort") (get ls.m/kwargs.baked ls.m/subcommand.default))))
                    (assert (not (in cookies (get ls.m/args.program ls.m/program)))))))
(defn [mark.baking] test-baking-all-programs [request]
      (try (.bake- ls cookies :world True :m/filter nots? :m/list True :m/sort None)
           (assert (= (ls) (cut (lfor item (find) (.removeprefix item (+ (str cookies) sep))) 1 None) assorted-cookies))
           (finally (.splat- ls :world True)
                    (assert (not (in (mangle "m/sort") (get ls.m/kwargs.baked ls.m/subcommand.default))))
                    (assert (not (in cookies (get ls.m/args.program ls.m/program))))
                    (assert (not (in (mangle "m/sort") (get find.m/kwargs.baked find.m/subcommand.default))))
                    (assert (not (in cookies (get find.m/args.program find.m/program)))))))
